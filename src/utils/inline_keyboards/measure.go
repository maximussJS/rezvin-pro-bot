package inline_keyboards

import (
	tg_models "github.com/go-telegram/bot/models"
	"rezvin-pro-bot/src/constants"
	"rezvin-pro-bot/src/models"
	"rezvin-pro-bot/src/types"
	bot_utils "rezvin-pro-bot/src/utils/bot"
)

func MeasureMenu() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üìã –°–ø–∏—Å–æ–∫ –∑–∞–º—ñ—Ä—ñ–≤", CallbackData: constants.MeasureList},
			},
			{
				{Text: "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º—ñ—Ä", CallbackData: constants.MeasureAdd},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: constants.MainBackToMain},
			},
		},
	}
}

func MeasureOk(measureId uint) *tg_models.InlineKeyboardMarkup {
	params := types.NewEmptyParams()

	params.MeasureId = measureId

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			GetOkButton(constants.MeasureSelected, params),
		},
	}
}

func MeasureMenuOk() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			GetOkButton(constants.MeasureMenu, types.NewEmptyParams()),
		},
	}
}

func MeasureDeleteOk() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			GetOkButton(constants.BackToMeasureList, types.NewEmptyParams()),
		},
	}
}

func MeasureList(measures []models.Measure, totalMeasureCount int64, limit, offset int) *tg_models.InlineKeyboardMarkup {
	measuresLen := len(measures)
	measuresKb := make([][]tg_models.InlineKeyboardButton, 0, measuresLen)

	for _, measure := range measures {
		params := types.NewEmptyParams()

		params.MeasureId = measure.Id
		measuresKb = append(measuresKb, []tg_models.InlineKeyboardButton{
			{
				Text:         measure.Name,
				CallbackData: bot_utils.AddParamsToQueryString(constants.MeasureSelected, params),
			},
		})
	}

	measuresKb = append(measuresKb, GetPaginationButtons(
		measuresLen,
		totalMeasureCount,
		constants.MeasureList,
		limit,
		offset,
		types.NewEmptyParams(),
		types.NewEmptyParams(),
	))

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: append(measuresKb, GetBackButton(constants.MeasureMenu, types.NewEmptyParams())),
	}
}

func MeasureSelectedMenu(measureId uint) *tg_models.InlineKeyboardMarkup {
	params := types.NewEmptyParams()

	params.MeasureId = measureId

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "‚è±Ô∏è –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –∑–∞–º—ñ—Ä", CallbackData: bot_utils.AddParamsToQueryString(constants.MeasureRename, params)},
			},
			{
				{Text: "üìè –ó–º—ñ–Ω–∏—Ç–∏ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É", CallbackData: bot_utils.AddParamsToQueryString(constants.MeasureChangeUnits, params)},
			},
			{
				{Text: "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º—ñ—Ä", CallbackData: bot_utils.AddParamsToQueryString(constants.MeasureDelete, params)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: constants.BackToMeasureList},
			},
		},
	}
}
