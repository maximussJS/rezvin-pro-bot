package services

import (
	"fmt"
	tg_models "github.com/go-telegram/bot/models"
	"rezvin-pro-bot/constants/callback_data"
	"rezvin-pro-bot/models"
)

type IInlineKeyboardService interface {
	AdminMain() *tg_models.InlineKeyboardMarkup
	ProgramMenu() *tg_models.InlineKeyboardMarkup
	UserRegister() *tg_models.InlineKeyboardMarkup
	UserMenu() *tg_models.InlineKeyboardMarkup
	PendingUsersList(users []models.User) *tg_models.InlineKeyboardMarkup
	PendingUserDecide(users models.User) *tg_models.InlineKeyboardMarkup
	ProgramList(programs []models.Program) *tg_models.InlineKeyboardMarkup
	ProgramSelectedMenu(programId uint) *tg_models.InlineKeyboardMarkup
	ProgramExerciseDeleteList(programId uint, exercises []models.Exercise) *tg_models.InlineKeyboardMarkup
}

type inlineKeyboardService struct{}

func NewInlineKeyboardService() *inlineKeyboardService {
	return &inlineKeyboardService{}
}

func (s *inlineKeyboardService) AdminMain() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üìñ –ü—Ä–æ–≥—Ä–∞–º–∏", CallbackData: callback_data.ProgramMenu},
			},
			{
				{Text: "‚è≥ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤", CallbackData: callback_data.PendingUsersList},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToStart},
			},
		},
	}
}

func (s *inlineKeyboardService) ProgramMenu() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º", CallbackData: callback_data.ProgramList},
			},
			{
				{Text: "‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É", CallbackData: callback_data.ProgramAdd},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToMain},
			},
		},
	}
}

func (s *inlineKeyboardService) UserRegister() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üì≤ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è", CallbackData: callback_data.UserRegister},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToStart},
			},
		},
	}
}

func (s *inlineKeyboardService) UserMenu() *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üöÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", CallbackData: callback_data.UserGetResults},
			},
			{
				{Text: "‚úçÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", CallbackData: callback_data.UserAddResults},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToStart},
			},
		},
	}
}

func (s *inlineKeyboardService) ProgramList(programs []models.Program) *tg_models.InlineKeyboardMarkup {
	programKb := make([][]tg_models.InlineKeyboardButton, 0, len(programs))

	for _, program := range programs {
		programKb = append(programKb, []tg_models.InlineKeyboardButton{
			{
				Text:         program.Name,
				CallbackData: fmt.Sprintf("%s:%d", callback_data.ProgramSelected, program.Id),
			},
		})
	}

	programKb = append(programKb, []tg_models.InlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToProgramMenu},
	})

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: programKb,
	}
}

func (s *inlineKeyboardService) ProgramSelectedMenu(programId uint) *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "üìã –°–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤", CallbackData: fmt.Sprintf("%s:%d", callback_data.ExerciseList, programId)},
			},
			{
				{Text: "‚ûï –î–æ–¥–∞—Ç–∏ –≤–ø—Ä–∞–≤—É", CallbackData: fmt.Sprintf("%s:%d", callback_data.ExerciseAdd, programId)},
			},
			{
				{Text: "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –≤–ø—Ä–∞–≤—É", CallbackData: fmt.Sprintf("%s:%d", callback_data.ExerciseDelete, programId)},
			},
			{
				{Text: "üìù –ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É", CallbackData: fmt.Sprintf("%s:%d", callback_data.ProgramRename, programId)},
			},
			{
				{Text: "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É", CallbackData: fmt.Sprintf("%s:%d", callback_data.ProgramDelete, programId)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToProgramList},
			},
		},
	}
}

func (s *inlineKeyboardService) ProgramExerciseDeleteList(programId uint, exercises []models.Exercise) *tg_models.InlineKeyboardMarkup {
	exerciseKb := make([][]tg_models.InlineKeyboardButton, 0, len(exercises))

	for _, exercise := range exercises {
		exerciseKb = append(exerciseKb, []tg_models.InlineKeyboardButton{
			{
				Text:         exercise.Name,
				CallbackData: fmt.Sprintf("%s:%d:%d", callback_data.ExerciseDeleteItem, programId, exercise.Id),
			},
		})
	}

	exerciseKb = append(exerciseKb, []tg_models.InlineKeyboardButton{
		{
			Text:         "üîô –ù–∞–∑–∞–¥",
			CallbackData: callback_data.ProgramBack,
		},
	})

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: exerciseKb,
	}
}

func (s *inlineKeyboardService) PendingUsersList(users []models.User) *tg_models.InlineKeyboardMarkup {
	userKb := make([][]tg_models.InlineKeyboardButton, 0, len(users))

	for _, user := range users {
		text := fmt.Sprintf("%s %s", user.FirstName, user.LastName)

		if user.Username != "" {
			text += fmt.Sprintf(" @%s", user.Username)
		}

		userKb = append(userKb, []tg_models.InlineKeyboardButton{
			{
				Text:         text,
				CallbackData: fmt.Sprintf("%s:%d", callback_data.PendingUsersSelected, user.Id),
			},
		})
	}

	userKb = append(userKb, []tg_models.InlineKeyboardButton{
		{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToMain},
	})

	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: userKb,
	}
}

func (s *inlineKeyboardService) PendingUserDecide(users models.User) *tg_models.InlineKeyboardMarkup {
	return &tg_models.InlineKeyboardMarkup{
		InlineKeyboard: [][]tg_models.InlineKeyboardButton{
			{
				{Text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", CallbackData: fmt.Sprintf("%s:%d", callback_data.PendingUsersApprove, users.Id)},
			},
			{
				{Text: "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", CallbackData: fmt.Sprintf("%s:%d", callback_data.PendingUsersDecline, users.Id)},
			},
			{
				{Text: "üîô –ù–∞–∑–∞–¥", CallbackData: callback_data.BackToPendingUsersList},
			},
		},
	}
}
