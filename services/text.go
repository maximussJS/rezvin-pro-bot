package services

import (
	"fmt"
	tg_bot "github.com/go-telegram/bot"
	"rezvin-pro-bot/models"
	"strings"
)

type ITextService interface {
	UserRegisterMessage(name string) string
	UserMenuMessage(name string) string
	DefaultMessage() string
	ErrorMessage() string
	UnapprovedUserExistsMessage() string
	DeclinedUserExistsMessage() string
	ApprovedUserExistsMessage() string
	UserRegisterSuccessMessage() string
	RequestTimeoutMessage() string
	PressStartMessage() string
	AdminMainMessage() string
	ProgramMenuMessage() string
	AdminOnlyMessage() string
	NewUserRegisteredMessage(name string) string

	EnterProgramNameMessage() string
	ProgramNameAlreadyExistsMessage(programName string) string
	ProgramSuccessfullyAddedMessage(programName string) string
	ProgramSuccessfullyRenamedMessage(oldProgramName, programName string) string
	SelectProgramMessage() string
	SelectProgramOptionMessage(programName string) string

	NoProgramsMessage() string

	ProgramSuccessfullyDeletedMessage(programName string) string

	EnterExerciseNameMessage() string
	ExerciseNameAlreadyExistsMessage(exerciseName string) string
	ExerciseSuccessfullyAddedMessage(exerciseName, programName string) string
	NoExercisesMessage(programName string) string
	ExercisesMessage(programName string, exercises []models.Exercise) string
	ExerciseDeleteMessage(programName string) string
	ExerciseSuccessfullyDeletedMessage(exerciseName, programName string) string

	NoPendingUsersMessage() string
	SelectPendingUserMessage() string
	SelectPendingUserOptionMessage(name string) string

	UserApprovedMessage(name string) string
	UserApprovedForAdminMessage(name string) string

	UserDeclinedMessage(name string) string
	UserDeclinedForAdminMessage(name string) string

	NoClientsMessage() string
	SelectClientMessage() string
	SelectClientOptionMessage(name string) string
	NoClientProgramsMessage(name string) string
	SelectClientProgramMessage(name string) string
	ClientProgramAssignedMessage(name, programName string) string
	NoProgramsForClientMessage(name string) string
	ClientProgramAlreadyAssignedMessage(name, programName string) string
}

type textService struct{}

func NewTextService() *textService {
	return &textService{}
}

func (s *textService) UserRegisterMessage(name string) string {
	var sb strings.Builder

	sb.WriteString("–ü—Ä–∏–≤—ñ—Ç, *")
	sb.WriteString(tg_bot.EscapeMarkdown(fmt.Sprintf("%s", name)))
	sb.WriteString("*")
	sb.WriteString("\\!\n")
	sb.WriteString("–¢–µ–±–µ –Ω–µ –º–∞—î –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. \n")
	sb.WriteString("–ù–∞—Ç–∏—Å–Ω–∏ \"üì≤ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è\", —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è\\.\n")
	sb.WriteString("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –±—É–¥–µ –∑–∞—á–µ–∫–∞—Ç–∏ –Ω–∞ –º–æ—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\\.\n")
	sb.WriteString("–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ —Ç–∏ –∑–º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü–∏–º –±–æ—Ç–æ–º\\.\n")

	return sb.String()
}

func (s *textService) UserMenuMessage(name string) string {
	var sb strings.Builder

	sb.WriteString("–ü—Ä–∏–≤—ñ—Ç, *")
	sb.WriteString(tg_bot.EscapeMarkdown(fmt.Sprintf("%s", name)))
	sb.WriteString("*")
	sb.WriteString("\\!\n")
	sb.WriteString("–ù–∞—Ç–∏—Å–Ω–∏ \"üöÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\", —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\\.\n")
	sb.WriteString("–ù–∞—Ç–∏—Å–Ω–∏ \"‚úçÔ∏è –í–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\", —â–æ–± –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏\\.\n")

	return sb.String()
}

func (s *textService) PressStartMessage() string {
	return "–í–≤–µ–¥–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\\."
}

func (s *textService) DefaultMessage() string {
	return "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ç–µ–±–µ\\.\n –í–≤–µ–¥–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\\. "
}

func (s *textService) ErrorMessage() string {
	return "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞\\. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ —â–µ —Ä–∞–∑\\."
}

func (s *textService) UnapprovedUserExistsMessage() string {
	return "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. –ê–ª–µ –†–æ–º–∞–Ω —â–µ –Ω–µ –ø—ñ–¥–∫–ª—é—á–∏–≤ —Ç–µ–±–µ –¥–æ –±–æ—Ç–∞\\. –ß–µ–∫–∞–π –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\\."
}

func (s *textService) ApprovedUserExistsMessage() string {
	return "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. –í–≤–µ–¥–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\\."
}

func (s *textService) UserRegisterSuccessMessage() string {
	return "–¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. –ß–µ–∫–∞–π –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –†–æ–º–∞–Ω–∞\\."
}

func (s *textService) RequestTimeoutMessage() string {
	return "–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
}

func (s *textService) AdminMainMessage() string {
	var sb strings.Builder

	sb.WriteString("–ü—Ä–∏–≤—ñ—Ç, *–†–æ–º–∞–Ω*\\!\n")
	sb.WriteString("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π\\:\n")

	return sb.String()
}

func (s *textService) ProgramMenuMessage() string {
	return "–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º\\:\n"
}

func (s *textService) AdminOnlyMessage() string {
	return "–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\\."
}

func (s *textService) EnterProgramNameMessage() string {
	return "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–≥—Ä–∞–º–∏\\."
}

func (s *textService) ProgramNameAlreadyExistsMessage(programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ –∑ –Ω–∞–∑–≤–æ—é \"*%s*\" –≤–∂–µ —ñ—Å–Ω—É—î\\. C–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ", programName)
}

func (s *textService) ProgramSuccessfullyAddedMessage(programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞\\.", programName)
}

func (s *textService) NoProgramsMessage() string {
	return "–ü—Ä–æ–≥—Ä–∞–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\\. –°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É —ñ –ø–æ–≤—Ç–æ—Ä–∏ —Å–ø—Ä–æ–±—É\\."
}

func (s *textService) SelectProgramMessage() string {
	return "–í–∏–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º—É\\."
}

func (s *textService) SelectProgramOptionMessage(programName string) string {
	return fmt.Sprintf("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–∏ \"*%s*\" \\:", programName)
}

func (s *textService) ProgramSuccessfullyRenamedMessage(oldProgramName, programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ \"*%s*\" \\.", oldProgramName, programName)
}

func (s *textService) ProgramSuccessfullyDeletedMessage(programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞\\.", programName)
}

func (s *textService) EnterExerciseNameMessage() string {
	return "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≤–ø—Ä–∞–≤–∏\\."
}

func (s *textService) ExerciseNameAlreadyExistsMessage(exerciseName string) string {
	return fmt.Sprintf("–í–ø—Ä–∞–≤–∞ –∑ –Ω–∞–∑–≤–æ—é \"*%s*\" –≤–∂–µ —ñ—Å–Ω—É—î\\. C–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ", exerciseName)
}

func (s *textService) ExerciseSuccessfullyAddedMessage(exerciseName, programName string) string {
	return fmt.Sprintf("–í–ø—Ä–∞–≤–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏ \"*%s*\" \\.", exerciseName, programName)
}

func (s *textService) NoExercisesMessage(programName string) string {
	return fmt.Sprintf("–í–ø—Ä–∞–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ \"*%s*\"\\. –î–æ–¥–∞–π –Ω–æ–≤—É –≤–ø—Ä–∞–≤—É —ñ –ø–æ–≤—Ç–æ—Ä–∏ —Å–ø—Ä–æ–±—É\\.", programName)
}

func (s *textService) ExercisesMessage(programName string, exercises []models.Exercise) string {
	var sb strings.Builder

	sb.WriteString("–í–ø—Ä–∞–≤–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ \"*")
	sb.WriteString(tg_bot.EscapeMarkdown(programName))
	sb.WriteString("*\"\\:\n")

	for i, exercise := range exercises {
		sb.WriteString(fmt.Sprintf("%d\\. %s\n", i+1, exercise.Name))
	}

	return sb.String()
}

func (s *textService) ExerciseDeleteMessage(programName string) string {
	return fmt.Sprintf("–í–∏–±–µ—Ä–∏ –≤–ø—Ä–∞–≤—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ \"*%s*\"\\.", programName)
}

func (s *textService) ExerciseSuccessfullyDeletedMessage(exerciseName, programName string) string {
	return fmt.Sprintf("–í–ø—Ä–∞–≤–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏ \"*%s*\"\\.", exerciseName, programName)
}

func (s *textService) NoPendingUsersMessage() string {
	return "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —á–µ–∫–∞—é—Ç—å –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\\."
}

func (s *textService) SelectPendingUserMessage() string {
	return "–í–∏–±–µ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\\."
}

func (s *textService) SelectPendingUserOptionMessage(name string) string {
	return fmt.Sprintf("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ \"*%s*\" \\:", name)
}

func (s *textService) UserApprovedMessage(name string) string {
	return fmt.Sprintf("–ü—Ä–∏–≤—ñ—Ç, *%s*\\! –†–æ–º–∞–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Ç–≤–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞, –í–≤–µ–¥–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\\.\\.", name)
}

func (s *textService) UserDeclinedMessage(name string) string {
	return fmt.Sprintf("–ü—Ä–∏–≤—ñ—Ç, *%s*\\! –†–æ–º–∞–Ω –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç–≤–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ –±–∞–∑—ñ –∫–ª—ñ—î–Ω—Ç—ñ–≤\\. –Ø–∫—â–æ —É —Ç–µ–±–µ —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –Ω—å–æ–≥–æ\\.", name)
}

func (s *textService) UserApprovedForAdminMessage(name string) string {
	return fmt.Sprintf("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ \"*%s*\" –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ\\.", name)
}

func (s *textService) DeclinedUserExistsMessage() string {
	return "–†–æ–º–∞–Ω –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç–≤–æ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é\\."
}

func (s *textService) UserDeclinedForAdminMessage(name string) string {
	return fmt.Sprintf("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ \"*%s*\" –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ\\.", name)
}

func (s *textService) NewUserRegisteredMessage(name string) string {
	return fmt.Sprintf("–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á \"*%s*\" —á–µ–∫–∞—î –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω—è\\.", name)
}

func (s *textService) NoClientsMessage() string {
	return "–ö–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\\."
}

func (s *textService) SelectClientMessage() string {
	return "–í–∏–±–µ—Ä–∏ –∫–ª—ñ—î–Ω—Ç–∞\\."
}

func (s *textService) SelectClientOptionMessage(name string) string {
	return fmt.Sprintf("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ \"*%s*\" \\:", name)
}

func (s *textService) NoClientProgramsMessage(name string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ \"*%s*\"\\. –î–æ–¥–∞–π –ø—Ä–æ–≥—Ä–∞–º—É –∫–ª—ñ—î–Ω—Ç—É —Å–ø–æ—á–∞—Ç–∫—É\\.", name)
}

func (s *textService) NoProgramsForClientMessage(name string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ \"*%s*\"\\. –°—Ö–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –≤—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏\\.", name)
}

func (s *textService) SelectClientProgramMessage(name string) string {
	return fmt.Sprintf("–í–∏–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∫–ª—ñ—î–Ω—Ç–∞ \"*%s*\"\\.", name)
}

func (s *textService) ClientProgramAlreadyAssignedMessage(name, programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ \"*%s*\" –≤–∂–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –∫–ª—ñ—î–Ω—Ç—É \"*%s*\"\\. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –ø—Ä–æ–≥—Ä–∞–º—É\\.", programName, name)
}

func (s *textService) ClientProgramAssignedMessage(name, programName string) string {
	return fmt.Sprintf("–ü—Ä–æ–≥—Ä–∞–º–∞ \"*%s*\" —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –∫–ª—ñ—î–Ω—Ç—É \"*%s*\"\\.", programName, name)
}
